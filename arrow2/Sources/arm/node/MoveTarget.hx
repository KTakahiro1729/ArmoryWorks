package arm.node;

@:keep class MoveTarget extends armory.logicnode.LogicTree {

	public function new() { super(); notifyOnAdd(add); }

	override public function add() {
		var _SetLocation = new armory.logicnode.SetLocationNode(this);
		var _OnUpdate = new armory.logicnode.OnUpdateNode(this);
		_OnUpdate.addOutputs([_SetLocation]);
		_SetLocation.addInput(_OnUpdate, 0);
		_SetLocation.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		var _Vector = new armory.logicnode.VectorNode(this);
		var _Math_001 = new armory.logicnode.MathNode(this);
		_Math_001.property0 = "Multiply";
		_Math_001.property1 = "false";
		var _Math = new armory.logicnode.MathNode(this);
		_Math.property0 = "Sine";
		_Math.property1 = "false";
		var _Time = new armory.logicnode.TimeNode(this);
		_Time.addOutputs([_Math]);
		_Time.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_Math.addInput(_Time, 0);
		_Math.addInput(new armory.logicnode.FloatNode(this, 0.5), 0);
		_Math.addOutputs([_Math_001]);
		_Math_001.addInput(_Math, 0);
		var _GetProperty_003 = new armory.logicnode.GetPropertyNode(this);
		_GetProperty_003.addInput(new armory.logicnode.ObjectNode(this, "ControllTarget"), 0);
		_GetProperty_003.addInput(new armory.logicnode.StringNode(this, "amp"), 0);
		_GetProperty_003.addOutputs([_Math_001]);
		_Math_001.addInput(_GetProperty_003, 0);
		_Math_001.addOutputs([_Vector]);
		_Vector.addInput(_Math_001, 0);
		var _GetProperty_001 = new armory.logicnode.GetPropertyNode(this);
		_GetProperty_001.addInput(new armory.logicnode.ObjectNode(this, "ControllTarget"), 0);
		_GetProperty_001.addInput(new armory.logicnode.StringNode(this, "y"), 0);
		_GetProperty_001.addOutputs([_Vector]);
		_Vector.addInput(_GetProperty_001, 0);
		var _SeparateXYZ = new armory.logicnode.SeparateVectorNode(this);
		var _GetLocation = new armory.logicnode.GetLocationNode(this);
		_GetLocation.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		_GetLocation.addOutputs([_SeparateXYZ]);
		_SeparateXYZ.addInput(_GetLocation, 0);
		_SeparateXYZ.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_SeparateXYZ.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_SeparateXYZ.addOutputs([_Vector]);
		_Vector.addInput(_SeparateXYZ, 2);
		_Vector.addOutputs([_SetLocation]);
		_SetLocation.addInput(_Vector, 0);
		_SetLocation.addOutputs([new armory.logicnode.NullNode(this)]);
		var _SetProperty = new armory.logicnode.SetPropertyNode(this);
		var _Gate = new armory.logicnode.GateNode(this);
		_Gate.property0 = "Equal";
		_Gate.property1 = 9.999999747378752e-05;
		var _OnEvent = new armory.logicnode.OnEventNode(this);
		_OnEvent.property0 = "Hit";
		_OnEvent.addOutputs([_Gate]);
		_Gate.addInput(_OnEvent, 0);
		var _Math_002 = new armory.logicnode.MathNode(this);
		_Math_002.property0 = "Modulo";
		_Math_002.property1 = "false";
		var _Integer_001 = new armory.logicnode.IntegerNode(this);
		var _GetProperty = new armory.logicnode.GetPropertyNode(this);
		_GetProperty.addInput(new armory.logicnode.ObjectNode(this, "ControllTarget"), 0);
		_GetProperty.addInput(new armory.logicnode.StringNode(this, "HitCounter"), 0);
		_GetProperty.addOutputs([_Integer_001]);
		_Integer_001.addInput(_GetProperty, 0);
		_Integer_001.addOutputs([_Math_002]);
		_Math_002.addInput(_Integer_001, 0);
		_Math_002.addInput(new armory.logicnode.FloatNode(this, 3.0), 0);
		_Math_002.addOutputs([_Gate]);
		_Gate.addInput(_Math_002, 0);
		var _Integer = new armory.logicnode.IntegerNode(this);
		_Integer.addInput(new armory.logicnode.IntegerNode(this, 0), 0);
		_Integer.addOutputs([_Gate]);
		_Gate.addInput(_Integer, 0);
		var _SetProperty_001 = new armory.logicnode.SetPropertyNode(this);
		_SetProperty_001.addInput(_Gate, 0);
		_SetProperty_001.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		_SetProperty_001.addInput(new armory.logicnode.StringNode(this, "amp"), 0);
		var _Math_006 = new armory.logicnode.MathNode(this);
		_Math_006.property0 = "Min";
		_Math_006.property1 = "false";
		var _Math_004 = new armory.logicnode.MathNode(this);
		_Math_004.property0 = "Add";
		_Math_004.property1 = "false";
		var _GetProperty_004 = new armory.logicnode.GetPropertyNode(this);
		_GetProperty_004.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		_GetProperty_004.addInput(new armory.logicnode.StringNode(this, "amp"), 0);
		_GetProperty_004.addOutputs([_Math_004]);
		_Math_004.addInput(_GetProperty_004, 0);
		_Math_004.addInput(new armory.logicnode.FloatNode(this, 0.5), 0);
		_Math_004.addOutputs([_Math_006]);
		_Math_006.addInput(_Math_004, 0);
		_Math_006.addInput(new armory.logicnode.FloatNode(this, 5.0), 0);
		_Math_006.addOutputs([_SetProperty_001]);
		_SetProperty_001.addInput(_Math_006, 0);
		_SetProperty_001.addOutputs([new armory.logicnode.NullNode(this)]);
		_Gate.addOutputs([_SetProperty, _SetProperty_001]);
		_Gate.addOutputs([new armory.logicnode.NullNode(this)]);
		_SetProperty.addInput(_Gate, 0);
		_SetProperty.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		_SetProperty.addInput(new armory.logicnode.StringNode(this, "y"), 0);
		var _Math_005 = new armory.logicnode.MathNode(this);
		_Math_005.property0 = "Min";
		_Math_005.property1 = "false";
		var _Math_003 = new armory.logicnode.MathNode(this);
		_Math_003.property0 = "Add";
		_Math_003.property1 = "false";
		var _GetProperty_002 = new armory.logicnode.GetPropertyNode(this);
		_GetProperty_002.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		_GetProperty_002.addInput(new armory.logicnode.StringNode(this, "y"), 0);
		_GetProperty_002.addOutputs([_Math_003]);
		_Math_003.addInput(_GetProperty_002, 0);
		_Math_003.addInput(new armory.logicnode.FloatNode(this, 1.0), 0);
		_Math_003.addOutputs([_Math_005]);
		_Math_005.addInput(_Math_003, 0);
		_Math_005.addInput(new armory.logicnode.FloatNode(this, 12.0), 0);
		_Math_005.addOutputs([_SetProperty]);
		_SetProperty.addInput(_Math_005, 0);
		_SetProperty.addOutputs([new armory.logicnode.NullNode(this)]);
	}
}
